/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package net.codehobby;

import java.util.HashMap;
import java.util.Map;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author jeff
 */
public class ListApp extends javax.swing.JFrame {
    
    private Map<Integer, String> lists;//The list of lists as Strings with Integer IDs associated with them.
    private DefaultListModel listsJListModel;

    /**
     * Creates new form ListApp
     */
    public ListApp()
    {
        listsJListModel = new DefaultListModel();
        lists = new HashMap<Integer, String>();
        
        initComponents();
        
        getLists();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listsJScrollPane = new javax.swing.JScrollPane();
        listsJList = new javax.swing.JList();
        itemsJScrollPane = new javax.swing.JScrollPane();
        itemsJPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lists");
        setName("mainJFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 600));

        listsJList.setModel( listsJListModel );
        listsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listsJListValueChanged(evt);
            }
        });
        listsJScrollPane.setViewportView(listsJList);

        itemsJPanel.setLayout(new javax.swing.BoxLayout(itemsJPanel, javax.swing.BoxLayout.PAGE_AXIS));
        itemsJScrollPane.setViewportView(itemsJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(itemsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemsJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listsJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This is called when the value on the lists JList is changed, so it'll start the process of changing the items JScrollPane.
     * @param evt The event object.
     */
    private void listsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listsJListValueChanged
        if( !(evt.getValueIsAdjusting()) )
        {//If the selection value isn't still in flux, change the values in listElementsJList.
            itemsJPanel.removeAll();
            itemsJPanel.updateUI();
            for( Map.Entry<Integer, String> entry : lists.entrySet() )
            {//Go through each entry in the map until it finds the one with a String value equal to what the user has selected.
                if( listsJList.getSelectedValue().toString().equals(entry.getValue()) )
                {//If the selected value of listsJList is equal to the current entry in the map, add the list items.
                    //For now, just add rows equal to the number of the index. I'll put in something more useful later.
                    for( Integer i = 0; i < entry.getKey(); i++ )
                    {
                        JPanel panel = new JPanel();
                        panel.setLayout( new BoxLayout(panel, BoxLayout.LINE_AXIS) );
                        JCheckBox checkBox = new JCheckBox();
                        panel.add( checkBox );
                        JLabel label = new JLabel( "TEST " + (i+1) );
                        panel.add( label );
                        itemsJPanel.add( panel );
                        itemsJPanel.revalidate();
                    }
                }
            }
        }
    }//GEN-LAST:event_listsJListValueChanged

    /**
     * This method gets the list of list from wherever and puts them in the lists object.
     * 
     * So far this method just makes up some lists, a more useful implementation will be written later.
     */
    private void getLists()
    {
        lists.clear();
        lists.put( 1, "Test 1" );
        lists.put( 2, "Test 2" );
        lists.put( 3, "Test 3" );

        syncLists();
    }
    
    private void syncLists()
    {
        for( Map.Entry<Integer, String> entry : lists.entrySet() )
        {
            listsJListModel.addElement( entry.getValue() );
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel itemsJPanel;
    private javax.swing.JScrollPane itemsJScrollPane;
    private javax.swing.JList listsJList;
    private javax.swing.JScrollPane listsJScrollPane;
    // End of variables declaration//GEN-END:variables
}
